# Use a global variable to indicate whether to do a full refresh or not.
# When running standard script, test if full refresh. If true, full refresh
# and toggle variable. Every X hours, turn Global to true.




external_components:
  - source:
      type: git
      url: https://github.com/vbaksa/esphome
      ref: dev
    components: [lilygo_t5_47_display, lilygo_t5_47_battery]


substitutions:
  esp_name: ESP Display #Device Name
  esp_hostname: esp-display
  run_time: 15s #can be as long as needed to get data
  sleep_time: 105s # normal sleep time
  night_sleep_time: 6h # 1st sleep time after midnight

esphome:
  name: ${esp_hostname}
  platform: ESP32
  board: esp32dev

mqtt:
  broker: 192.168.1.250
  username: doorboardfront
  password: bohthaaQu3aig3Queir0ne7jaezohgha


wifi:
  ssid: ***REMOVED***
  password: ***REMOVED***
  manual_ip:
    static_ip: 192.168.1.49
    gateway: 192.168.1.1
    subnet: 255.255.255.0
  fast_connect: true
  power_save_mode: HIGH

ota:
  password: ***REMOVED***
  id: ota_id


# logger:
#   level: debug

api:
  password: ***REMOVED***


sun:
  latitude: 40.7818°
  longitude: -73.9175°


deep_sleep:
  id: deep_sleep_control
  sleep_duration: ${sleep_time}
  touch_wakeup: true

time:
  - platform: sntp
    id: ntp
  - platform: homeassistant
    on_time:
      - seconds: /10
        then:
          - script.execute: standard_update
          - script.execute: consider_sleep
  - platform: sntp
    on_time:
      - seconds: 0
        minutes: /30
        then:
          - component.update: battery



script:
  - id: standard_update
    then:
      - component.update: battery
      - display.page.show: standardRefresh
      - component.update: eInkDisplay
  - id: consider_sleep
    then:
      - if:
          condition:
            binary_sensor.is_on: prevent_deep_sleep
          then:
            - logger.log: 'Skipping sleep, per prevent_deep_sleep'
            - deep_sleep.prevent: deep_sleep_control
          else:
            - lambda: |-
                id(deep_sleep_control).set_sleep_duration(id(sleeptime).state * 1000);
            - deep_sleep.enter: deep_sleep_control


# Touch

esp32_touch:

binary_sensor:
  - platform: esp32_touch
    name: "TouchTest"
    pin: GPIO13
    threshold: 700
    wakeup_threshold: 700
  - platform: gpio
    pin:
      number: GPIO39
      inverted: true
    name: "${esp_name} Button 1"
    internal: true
    on_press:
      then:
  - platform: homeassistant
    id: prevent_deep_sleep
    name: Prevent Deep Sleep
    entity_id: input_boolean.prevent_deep_sleep

sensor:
  - platform: lilygo_t5_47_battery
    id: battery
    update_interval: never
    voltage:
      name: "Battery Voltage"
  - platform: mqtt_subscribe
    name: "SleepTime"
    id: sleeptime
    topic: sleepFor

#Bikes
  - platform: homeassistant
    id: crescent
    entity_id: sensor.crescentbikes
    internal: true
  - platform: homeassistant
    id: shore
    entity_id: sensor.shorebikes
    internal: true
  - platform: homeassistant
    id: parkside
    entity_id: sensor.parksidebikes
    internal: true
  - platform: homeassistant
    id: cherry
    entity_id: sensor.cherrybikes
    internal: true

# #Sun
#   - platform: sun
#     name: Sun Elevation
#     type: elevation
#     id: sunElevation
#     internal: true


text_sensor:
#Busses
  #Q69
    #Steinway
  - platform: homeassistant
    id: q69sA
    entity_id: sensor.q69s0
    internal: true
    filters:
    - substitute:
      - "unavailable -> "
  - platform: homeassistant
    id: q69sB
    entity_id: sensor.q69s1
    internal: true
    filters:
    - substitute:
      - "unavailable -> "
  - platform: homeassistant
    id: q69sC
    entity_id: sensor.q69s2
    internal: true
    filters:
    - substitute:
      - "unavailable -> "
    #Plaza
  - platform: homeassistant
    id: q69pA
    entity_id: sensor.q69p0
    internal: true
    filters:
    - substitute:
      - "unavailable -> "
  - platform: homeassistant
    id: q69pB
    entity_id: sensor.q69p1
    internal: true
    filters:
    - substitute:
      - "unavailable -> "
  - platform: homeassistant
    id: q69pC
    entity_id: sensor.q69p2
    internal: true
    filters:
    - substitute:
      - "unavailable -> "
  #Q100
    #Steinway
  - platform: homeassistant
    id: q100sA
    entity_id: sensor.q100s0
    internal: true
    filters:
    - substitute:
      - "unavailable -> "
  - platform: homeassistant
    id: q100sB
    entity_id: sensor.q100s1
    internal: true
    filters:
    - substitute:
      - "unavailable -> "
  - platform: homeassistant
    id: q100sC
    entity_id: sensor.q100s2
    internal: true
    filters:
    - substitute:
      - "unavailable -> "
    #Plaza
  - platform: homeassistant
    id: q100pA
    entity_id: sensor.q100p0
    internal: true
    filters:
    - substitute:
      - "unavailable -> "
  - platform: homeassistant
    id: q100pB
    entity_id: sensor.q100p1
    internal: true
    filters:
    - substitute:
      - "unavailable -> "
  - platform: homeassistant
    id: q100pC
    entity_id: sensor.q100p2
    internal: true
    filters:
    - substitute:
      - "unavailable -> "



font:
  - file: "/Users/donromaniello/Library/Fonts/Ubuntu-Regular.ttf"
    id: ubuntu36
    size: 36
  - file: "/Users/donromaniello/Library/Fonts/Ubuntu-Light.ttf"
    id: ubuntu40
    size: 40
  - file: "/Users/donromaniello/Library/Fonts/Ubuntu-Light.ttf"
    id: ubuntu55
    size: 55
  - file: "/Users/donromaniello/Library/Fonts/Ubuntu-Light.ttf"
    id: ubuntu88
    size: 88

# Display is not centered.
# Shift everything right by 4 px, giving 536 width
display:
  - platform: lilygo_t5_47_display
    id: eInkDisplay
    clear: false
    update_interval: never
    rotation: 270
    pages:
      - id: standardRefresh
        lambda: |-
          //it.image(12, 8, id(background));

          // Drawn background
          it.filled_rectangle(13, 11.5, 256.2, 579.2);
          it.filled_rectangle(17, 15.5, 248.2, 571.2, COLOR_OFF);
          it.filled_rectangle(275.6, 11.5, 256.2, 579.2);
          it.filled_rectangle(279.6, 15.5, 248.2, 571.2, COLOR_OFF);


          it.filled_circle(272, 650.2, 268);
          it.filled_circle(272, 650.2, 264, COLOR_OFF);
          it.filled_circle(272, 650.2, 260);

          it.filled_rectangle(12, 650.2, 520, 298.3);
          it.filled_rectangle(16, 650.2, 512, 294.3, COLOR_OFF);

          it.filled_circle(272, 650.2, 256, COLOR_OFF);






          // Steinway
          it.print(64, 20.8, id(ubuntu36), "Steinway");
          it.line(42, 65.8, 240, 65.8);
          it.line(63, 109.5, 92, 109.5);
          it.print(102, 75.8, id(ubuntu40), "q69");
          it.line(189, 109.5, 218, 109.5);
          it.line(63, 267, 78, 267);
          it.print(90, 233.4, id(ubuntu40), "q100");
          it.line(200, 267, 215, 267);

          // Plaza
          it.print(359, 20.8, id(ubuntu36), "Plaza");
          it.line(304, 65.8, 502, 65.8);
          it.line(321, 109.5, 351, 109.5);
          it.print(368, 75.8, id(ubuntu40), "q69");
          it.line(452, 109.5, 482, 109.5);
          it.line(321, 267, 336, 267);
          it.print(357, 233.4, id(ubuntu40), "q100");
          it.line(467, 267, 482, 267);

          it.printf(26, 122.5, id(ubuntu88), "%s", id(q69sA).state.c_str());
          it.printf(289, 122.5, id(ubuntu88), "%s", id(q69pA).state.c_str());
          it.printf(26, 280, id(ubuntu88), "%s", id(q100sA).state.c_str());
          it.printf(289, 280, id(ubuntu88), "%s", id(q100pA).state.c_str());



            //Crescent
              //Wipe
            it.filled_circle(272, 416.5, 12.5, COLOR_OFF);
            it.filled_circle(231.4, 420.1, 12.5, COLOR_OFF);
            it.filled_circle(312.6, 420.1, 12.5, COLOR_OFF);
            it.filled_circle(192.1, 430.6, 12.5, COLOR_OFF);
            it.filled_circle(351.0, 430.6, 12.5, COLOR_OFF);

            it.filled_circle(251.6, 417.4, 12.5, COLOR_OFF);
            it.filled_circle(292.4, 417.4, 12.5, COLOR_OFF);
            it.filled_circle(211.5, 424.5, 12.5, COLOR_OFF);
            it.filled_circle(332, 424.5, 12.5, COLOR_OFF);

            if ((int)id(crescent).state % 2 == 1) {
              if (id(crescent).state >= 1) {
                it.filled_circle(272, 416.5, 12.5);
                it.filled_circle(272, 416.5, 9.5, COLOR_OFF);
              }
              if (id(crescent).state >= 3) {
                it.filled_circle(231.4, 420.1, 12.5);
                it.filled_circle(312.6, 420.1, 12.5);
                it.filled_circle(231.4, 420.1, 9.5, COLOR_OFF);
                it.filled_circle(312.6, 420.1, 9.5, COLOR_OFF);
              }
              if (id(crescent).state >= 5) {
                it.filled_circle(192.1, 430.6, 12.5);
                it.filled_circle(351.9, 430.6, 12.5);
                it.filled_circle(192.1, 430.6, 9.5, COLOR_OFF);
                it.filled_circle(351.9, 430.6, 9.5, COLOR_OFF);
              }
            }
            if ((int)id(crescent).state % 2 == 0) {
              if (id(crescent).state >= 2) {
                it.filled_circle(251.6, 417.4, 12.5);
                it.filled_circle(292.4, 417.4, 12.5);
                it.filled_circle(251.6, 417.4, 9.5, COLOR_OFF);
                it.filled_circle(292.4, 417.4, 9.5, COLOR_OFF);
              }
              if (id(crescent).state >= 4) {
                it.filled_circle(211.5, 424.5, 12.5);
                it.filled_circle(332, 424.5, 12.5);
                it.filled_circle(212, 424.5, 9.5, COLOR_OFF);
                it.filled_circle(332.5, 424.5, 9.5, COLOR_OFF);
              }
            }

            // Parkside
              //Wipe
            it.filled_circle(505.6, 650.2, 12.5, COLOR_OFF);
            it.filled_circle(502.1, 609.6, 12.5, COLOR_OFF);
            it.filled_circle(505.6, 690.7, 12.5, COLOR_OFF);
            it.filled_circle(491.5, 570.3, 12.5, COLOR_OFF);
            it.filled_circle(505.6, 730.1, 12.5, COLOR_OFF);

            it.filled_circle(504.7, 629.8, 12.5, COLOR_OFF);
            it.filled_circle(505.6, 670.5, 12.5, COLOR_OFF);
            it.filled_circle(497.6, 589.7, 12.5, COLOR_OFF);
            it.filled_circle(505.6, 710.6, 12.5, COLOR_OFF);

            if ((int)id(parkside).state % 2 == 1) {
              if (id(parkside).state >= 1) {
                it.filled_circle(505.6, 650.2, 12.5);
                it.filled_circle(505.6, 650.2, 9.5, COLOR_OFF);
              }
              if (id(parkside).state >= 3) {
                it.filled_circle(502.1, 609.6, 12.5);
                it.filled_circle(502.1, 609.6, 9.5, COLOR_OFF);
                it.filled_circle(504.6, 690.7, 12.5);
                it.filled_circle(504.6, 690.7, 9.5, COLOR_OFF);
              }
              if (id(parkside).state >= 5) {
                it.filled_circle(491.5, 570.3, 12.5);
                it.filled_circle(491.5, 570.3, 9.5, COLOR_OFF);
                it.filled_circle(505.6, 730.1, 12.5);
                it.filled_circle(505.6, 730.1, 9.5, COLOR_OFF);
              }
            }
            if ((int)id(parkside).state % 2 == 0) {
              if (id(parkside).state >= 2) {
                it.filled_circle(504.7, 629.8, 12.5);
                it.filled_circle(504.7, 629.8, 9.5, COLOR_OFF);
                it.filled_circle(505.6, 670.5, 12.5);
                it.filled_circle(505.6, 670.5, 9.5, COLOR_OFF);

              }
              if (id(parkside).state >= 4) {
                it.filled_circle(497.6, 589.7, 12.5);
                it.filled_circle(497.6, 589.7, 9.5, COLOR_OFF);

                it.filled_circle(505.6, 710.6, 12.5);
                it.filled_circle(505.6, 710.6, 9.5, COLOR_OFF);

              }
            }

            // Cherry
              //Wipe
              it.filled_circle(39.4, 650.2, 12.5, COLOR_OFF);
              it.filled_circle(41.9, 609.6, 12.5, COLOR_OFF);
              it.filled_circle(39.4, 690.7, 12.5, COLOR_OFF);
              it.filled_circle(52.5, 570.3, 12.5, COLOR_OFF);
              it.filled_circle(39.4, 730.1, 12.5, COLOR_OFF);

              it.filled_circle(39.3, 629.8, 12.5, COLOR_OFF);
              it.filled_circle(39.4, 670.5, 12.5, COLOR_OFF);
              it.filled_circle(46.4, 589.7, 12.5, COLOR_OFF);
              it.filled_circle(38.4, 710.6, 12.5, COLOR_OFF);

            if ((int)id(cherry).state % 2 == 1) {
              if (id(cherry).state >= 1) {
                it.filled_circle(39.4, 650.2, 12.5);
                it.filled_circle(39.4, 650.2, 9.5, COLOR_OFF);
              }
              if (id(cherry).state >= 3) {
                it.filled_circle(41.9, 609.6, 12.5);
                it.filled_circle(41.9, 609.6, 9.5, COLOR_OFF);

                it.filled_circle(39.4, 690.7, 12.5);
                it.filled_circle(39.4, 690.7, 9.5, COLOR_OFF);
              }
              if (id(cherry).state >= 5) {
                it.filled_circle(52.5, 570.3, 12.5);
                it.filled_circle(52.5, 570.3, 9.5, COLOR_OFF);

                it.filled_circle(39.4, 730.1, 12.5);
                it.filled_circle(39.4, 730.1, 9.5, COLOR_OFF);
              }
            }
            if ((int)id(cherry).state % 2 == 0) {
              if (id(cherry).state >= 2) {
                it.filled_circle(39.3, 629.8, 12.5);
                it.filled_circle(39.3, 629.8, 9.5, COLOR_OFF);

                it.filled_circle(39.4, 670.5, 12.5);
                it.filled_circle(39.4, 670.5, 9.5, COLOR_OFF);
              }
              if (id(cherry).state >= 4) {
                it.filled_circle(46.4, 589.7, 12.5);
                it.filled_circle(46.4, 589.7, 9.5, COLOR_OFF);

                it.filled_circle(38.4, 710.6, 12.5);
                it.filled_circle(38.4, 710.6, 9.5, COLOR_OFF);
              }
            }


            // LIMIT FOR NOW








            // Shore
              //Wipe
            it.filled_circle(272, 923.9, 12.5, COLOR_OFF);
            it.filled_circle(231.6, 923.9, 12.5, COLOR_OFF);
            it.filled_circle(312.4, 923.9, 12.5, COLOR_OFF);
            it.filled_circle(191.2, 923.9, 12.5, COLOR_OFF);
            it.filled_circle(352.8, 923.9, 12.5, COLOR_OFF);

            it.filled_circle(251.8, 923.9, 12.5, COLOR_OFF);
            it.filled_circle(292.2, 923.9, 12.5, COLOR_OFF);
            it.filled_circle(211.4, 923.9, 12.5, COLOR_OFF);
            it.filled_circle(332.6, 923.9, 12.5, COLOR_OFF);

            if ((int)id(shore).state % 2 == 1) {
              if (id(shore).state >= 1) {
                it.filled_circle(272, 923.9, 12.5);
                it.filled_circle(272, 923.9, 9.5, COLOR_OFF);
              }
              if (id(shore).state >= 3) {
                it.filled_circle(231.6, 923.9, 12.5);
                it.filled_circle(312.4, 923.9, 12.5);
                it.filled_circle(231.6, 923.9, 9.5, COLOR_OFF);
                it.filled_circle(312.4, 923.9, 9.5, COLOR_OFF);
              }
              if (id(shore).state >= 5) {
                it.filled_circle(191.2, 923.9, 12.5);
                it.filled_circle(352.8, 923.9, 12.5);
                it.filled_circle(191.2, 923.9, 9.5, COLOR_OFF);
                it.filled_circle(352.8, 923.9, 9.5, COLOR_OFF);
              }
            }
            if ((int)id(shore).state % 2 == 0) {
              if (id(shore).state >= 2) {
                it.filled_circle(251.8, 923.9, 12.5);
                it.filled_circle(292.2, 923.9, 12.5);
                it.filled_circle(251.8, 923.9, 9.5, COLOR_OFF);
                it.filled_circle(292.2, 923.9, 9.5, COLOR_OFF);
              }
              if (id(shore).state >= 4) {
                it.filled_circle(211.4, 923.9, 12.5);
                it.filled_circle(332.6, 923.9, 12.5);
                it.filled_circle(211.4, 923.9, 9.5, COLOR_OFF);
                it.filled_circle(332.6, 923.9, 9.5, COLOR_OFF);
              }
            }



